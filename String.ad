/************************************************************
* This file is part of the Gauss Web Server project.
* Source code can be used for any purpose, free of charge,
* under the following conditions:
*
* 1.) Users will never hold the Author liable for 
*     any defects of this software.
* 2.) If used for safety-critical purposes, the 
*     user must prove fitness for purpose by means
*     of systematic testing and development according
*     to industry standards such as the V-Model.
*
* Author and Copyright holder: Dipl. Ing.(BA) Frank Gerlach
***********************************************************/

generative_function[String](preallocSize)[[
    class dllexport_a String_@preallocSize@
    {
        char _preAllocBuf[@preallocSize@];
        *char _extendedBuf[];
        int _length;

    methods:

        String_@preallocSize@();
        String_@preallocSize@(&char init[]);
        void print();
        void printNoLF();
        void append(&char str[]);
        void append(&char str[],int pos,int anzahl);
        void append(*char buf[]);
        void append(&String_@preallocSize@ other);
        void append(String_@preallocSize@* other);
        void append(char c);
        void append(int x);

        void assign(&char str[]);

        void assign(&String_@preallocSize@ anderer);
 
        char getAt(int x);

        int capacity();
        int length();
        void clear();
        void clearAndReclaimMemory();
        int lengthOf(&char str[]);

        int compare(&char str[]);

        int compare(&String_@preallocSize@ other);
   

        thisreturn void getKey(String_@preallocSize@* key);

        int getHashCode();


        void getExtendedBuf(*char extendedBuf[]);

        int equals(&String_@preallocSize@ other);

        int equals(&char other[]);

        void toCharArray(&char feld[]);

        int asNumber();

        int asNumber(int radix);

        double asDouble();

        void escape(&String_@preallocSize@ escaped,char escape);

        void deEscape(&String_@preallocSize@ deescaped,char escape);

        int endsWith(&char end[]);

        int endsWith(&String_16 str2);

        void rightOf(char divider,&String_@preallocSize@ oStr);

        int startsWith(&char buf[]);

        void subString(&String_@preallocSize@ oStr,int start, int end);

        ~String_@preallocSize@();

        int isNumberChar(char c);

        int hashCode();

        void ersetzen(&String_@preallocSize@ alt,&String_@preallocSize@ neu,&String_@preallocSize@ ergebnis);

        void unitTest();
    };
 
    //Adapter Class for Hashing with SPHT
    class Hash_String_@preallocSize@
    {
       methods:
         static int hash(&String_@preallocSize@ str);
    };

    //Adapter class for comparison in SPHT
    class Compare_String_@preallocSize@
    {
       methods:
         static int compare(&String_@preallocSize@ s1,&String_@preallocSize@ s2);
    };

    class Assigner_String_@preallocSize@
    {
      methods:
         static void assign(&String_@preallocSize@ s1,&String_@preallocSize@ s2);
    };


]]


[[

        String_@preallocSize@::String_@preallocSize@(&char init[])
        {
           _length=0;
           this.append(init);
        }
        String_@preallocSize@::String_@preallocSize@()
        {
           _length=0;
           this.append("");
        }

        int String_@preallocSize@::capacity()
        {
           if( _extendedBuf   != NULL)
           {
              return _extendedBuf.sz;
           }
           return _preAllocBuf.sz;
        }

        
        void String_@preallocSize@::ersetzen(&String_@preallocSize@ alt,&String_@preallocSize@ neu,&String_@preallocSize@ ergebnis)
        {
           var int stelle = 0;
           var int ende = this.length() - alt.length();
           while( stelle < ende )
           {
               var int j=0;
               var int gleich = 1;
               var int stellePruef = stelle;
               for(j=0; j < alt.length(); j++)
               {
                   if( this.getAt(stellePruef) != alt.getAt(j) )
                   { 
                      gleich = 0;
                   } 
                   stellePruef++;
               }
               if(gleich == 1)
               {
                  ergebnis.append(neu);
                  stelle = stellePruef;
               }
               else
               {
                  ergebnis.append(this.getAt(stelle));
                  stelle++;
               }
           }
           while( stelle < this.length())
           {
               ergebnis.append(this.getAt(stelle));
               stelle++;
           }
        }

        void String_@preallocSize@::getKey(String_@preallocSize@* key)
        {
          key = this;
        }

        int String_@preallocSize@::compare(&String_@preallocSize@ other)
        {
           var int equal = 1;
           if( this.length() == other.length() )
           {
              var int l = this.length();
              var int i;
              for(i=0; (i < l) && (equal == 1); i++)
              {
                 if( this.getAt(i) != other.getAt(i) )
                 {
                    equal = 0;
                 }
              } 
           }
           return equal;
        }

        void String_@preallocSize@::append(*char buf[])
        {
             var int i=0;
             while((i<buf.sz) && (buf[i]!='\\0'))
             {
                 var int j=0;
                 var char temp[100];
                 while( (j<99) && (i<buf.sz) && (buf[i]!='\\0'))
                 {
                     temp[j]=buf[i];
                    j=j+1;i=i+1;
                 }
                 temp[j]='\\0';
                 this.append(temp);
             }
        }

        double String_@preallocSize@::asDouble()
        {
            var double ret;
            if(_extendedBuf != NULL)
            {
               inline_cpp\[\[
                 ret=atof(_extendedBuf._theObject->_array);
               \]\]
            }
            else
            {
               inline_cpp\[\[
                 ret=atof(_preAllocBuf._array);
               \]\]
            }
            return ret;
        }

        void String_@preallocSize@::assign(&char str[])
        {
           this.clear();
           this.append(str);
        }

        void String_@preallocSize@::assign(&String_@preallocSize@ anderer)
        {
           this.clear();
           this.append(anderer);
        }


        void String_@preallocSize@::append(&char str[])
        {
             var int i=0;
             while(str[i] != '\\0'){i=i+1;}
             if(_extendedBuf != NULL)
             {
                 var int l=this.length();
                 var int cap=this.capacity() - 1;
                 var int diff=cap-l;
                 if(diff < i)
                 {
                     var *char newBuf[]=new char[(l+i)*2];
                     var int j=0;
                     while(j<l)
                     {
                            newBuf[j]=_extendedBuf[j];
                            j=j+1;
                     }
                     var int newLength=l+i;
                     while(j<newLength)
                     {
                         newBuf[j]=str[j-l];
                         j=j+1;
                     }

                     newBuf[j]='\\0';
                     _extendedBuf=newBuf;
                     _length=newLength;
                 }
                 var int diff2=diff+1;
                 if(diff2>i)
                 {
                     var int j;
                     var int newLength=l+i;
                     j=l;
                     while(j<newLength)
                     {
                         _extendedBuf[j]=str[j-l];
                         j=j+1;
                     }
                     _extendedBuf[j]='\\0';
                     _length=newLength;
                 }
             }
             if(_extendedBuf == NULL)
             {
                 var int freeSpace=_preAllocBuf.sz-_length - 1;
                 var int useExt=0;
                 if(i>freeSpace)
                 {
                     _extendedBuf=new char[(_length+i)*2];
                     //this.append(str);
                     var int ii=0;
                     while(ii<_length)
                     {
                        _extendedBuf[ii]=_preAllocBuf[ii];
                        ii=ii+1;
                     }
                     var int newLength=_length+i;
                     while(ii<newLength)
                       {_extendedBuf[ii]=str[ii-_length];ii=ii+1;}
                     _extendedBuf[ii]='\\0';
                     _preAllocBuf[0]='\\0';
                     _length=newLength;
                     useExt=1;
                 }
                 if(useExt == 0)
                 {
                    var int k=0;
                    while(str[k]!='\\0')
                    {
                       _preAllocBuf[_length]=str[k];
                       _length=_length+1;
                       k=k+1;
                    }
                    _preAllocBuf[_length]='\\0';
                 }
             }

        }


        void String_@preallocSize@::append(&char str[],int pos,int anzahl)
        {
           //koennte besser gemacht werden
           var char buf[2];
           buf[1]='\\0';
           for(var int i=0;i<anzahl;i++)
           {
              buf[0]=str[i+pos];
              this.append(buf);
           }
        }

        int String_@preallocSize@::length()
        {
           var int i=0;
           return _length;
        }

        void String_@preallocSize@::print()
        {
            if(_extendedBuf == NULL)
            {
               _preAllocBuf[_preAllocBuf.sz - 1]='\\0';
               inline_cpp[[printf("%s\\\\n",_preAllocBuf._array);\]]
            }
            if(_extendedBuf != NULL)
            {
              _extendedBuf[_extendedBuf.sz - 1]='\\0';
               inline_cpp[[printf("%s\\\\n",_extendedBuf._theObject->_array);\]]
            }
        }

        void String_@preallocSize@::printNoLF()
        {
            if(_extendedBuf == NULL)
            {
               _preAllocBuf[_preAllocBuf.sz - 1]='\\0';
               inline_cpp[[printf("%s",_preAllocBuf._array);\]]
            }
            if(_extendedBuf != NULL)
            {
              _extendedBuf[_extendedBuf.sz - 1]='\\0';
               inline_cpp[[printf("%s",_extendedBuf._theObject->_array);\]]
            }
        }

        int String_@preallocSize@::lengthOf(&char str[])
        {
           var int l=0;
           while(str[l] !='\\0')
           {
              l=l+1;
           }
           return l;
        }

        void String_@preallocSize@::clear()
        {
            _length=0;
            if(_extendedBuf != NULL){_extendedBuf[0]='\\0';}
            _preAllocBuf[0]='\\0';
        }

        void String_@preallocSize@::append(&String_@preallocSize@ other)
        {
           var int newLength=_length+other.length();
           if(_extendedBuf != NULL)
           {
              var int freeCap=_extendedBuf.sz - 1 - _length;
              if(freeCap<other.length())
              {
                var int newCap=2*(_length+other.length());
                var *char targetBuf[]=new char[newCap];
                for(var int i=0;i<_length;i++)
                {targetBuf[i]=_extendedBuf[i];}
                _extendedBuf=targetBuf;
              }
              if(other._extendedBuf != NULL)
              {
                 for(var int i=_length;i<newLength;i++)
                 {_extendedBuf[i]=other._extendedBuf[i-_length];}
              }
              else
              {
                 for(var int i=_length;i<newLength;i++)
                 {_extendedBuf[i]=other._preAllocBuf[i-_length];}
              }
              _extendedBuf[newLength]='\\0';
           }
           else
           {
               var int freeCap=_preAllocBuf.sz - 1 - _length;
               if(freeCap<other.length())
               {
                var int newCap=2*(_length+other.length());
                var *char targetBuf[]=new char[newCap];
                for(var int i=0;i<_length;i++)
                {targetBuf[i]=_preAllocBuf[i];}
                _extendedBuf=targetBuf;
                if(other._extendedBuf != NULL)
                {
                   for(var int i=_length;i<newLength;i++)
                   {_extendedBuf[i]=other._extendedBuf[i-_length];}
                }
                else
                {
                   for(var int i=_length;i<newLength;i++)
                   {_extendedBuf[i]=other._preAllocBuf[i-_length];}
                }
              }
              else
              {
                if(other._extendedBuf != NULL)
                {
                   for(var int i=_length;i<newLength;i++)
                   {_preAllocBuf[i]=other._extendedBuf[i-_length];}
                }
                else
                {
                   for(var int i=_length;i<newLength;i++)
                   {_preAllocBuf[i]=other._preAllocBuf[i-_length];}
                }
                _preAllocBuf[newLength]='\\0';
              }

           }
           _length=newLength;
        }


        void String_@preallocSize@::clearAndReclaimMemory()
        {
           _length=0;
           if(_extendedBuf != NULL)
           {
               _extendedBuf=NULL;
           }

           if(_extendedBuf == NULL)
           {
              _preAllocBuf[0]='\\0';
           }
        }

        int String_@preallocSize@::compare(&char str[])
        {
           var int ls=0;
           ls=this.lengthOf(str);
           var int lsp1=ls+1;
           if(_extendedBuf != NULL)
           {
               if(ls != this.length()) { return 1;}

               var int i=0;
               while(i<lsp1)
               {
                   if( str[i] != _extendedBuf[i])
                   {
                      return 1;
                   }
                   i=i+1;
               }
           }

           if(_extendedBuf == NULL)
           {
               if(ls != this.length()) { return 1;}
               var int i=0;
               while(i<lsp1)
               {
                   if(str[i] != _preAllocBuf[i])
                   {
                      return 1;
                   }
                   i=i+1;
               }
           }
           return 0;
        }

        

        void String_@preallocSize@::append(char c)
        {
           var char buf[2];
           buf[0]=c;
           buf[1]='\\0';
           this.append(buf);
        }

        char String_@preallocSize@::getAt(int i)
        {
            if(_extendedBuf != NULL)
            {
               return _extendedBuf[i];
            }
            else
            {
                return _preAllocBuf[i];
            }
            return '\0';//dummy
        }

        void String_@preallocSize@::getExtendedBuf(*char extendedBufRet[])
        {
           extendedBufRet=_extendedBuf;
        }

        String_@preallocSize@::~String_@preallocSize@()
        {
            _extendedBuf=NULL;
            _length= -13;
        }

        void String_@preallocSize@::rightOf(char divider,&String_@preallocSize@ oStr)
        {
           var int zeiger = this.length() - 1;
           var int fertig = 0;
           while((zeiger >= 0) && ( fertig == 0))
           {
              var char zeichen = this.getAt(zeiger);
              if( zeichen == divider )
              {
                 fertig = 1;
              } 
              else
              {
                 zeiger=zeiger - 1;
              }  
           }
           oStr.clear();
           for(var int i=zeiger+1;i < this.length(); i++)
           {
              oStr.append(this.getAt(i));
           }
        }

        //ret == 0 if equal; ret==1 if not equal
        int String_@preallocSize@::equals(&String_@preallocSize@ other)
        {
           var int equal=0;
           var int l=this.length();
           if(l != other.length())
           {
              return 0;
           }
           for(var int i=0;i<this.length();i++)
           {
               if(this.getAt(i) != other.getAt(i))
               {return 0;}
           }
           return 1;
        }

        int String_@preallocSize@::equals(&char other[])
        {
           var int lother=0;
           while((lother<other.sz) && (other[lother] != '\\0'))
           {
              lother++;
           }
           if(lother != this.length())
           {return 0;}
           for(var int i=0;i<lother;i++)
           {
              if(this.getAt(i) != other[i])
              {return 0;}
           }
           return 1;
        }

        void String_@preallocSize@::append(String_@preallocSize@* other)
        {
            for(var int i=0;i<other.length();i++)
            {
                this.append(other.getAt(i));
            }
        }
        void String_@preallocSize@::append(int x)
        {
           var char buf[16];
           buf[0]='\\0';
           inline_cpp[[ sprintf(buf._array,"%i",x); \]]
           this.append(buf);
        }

        void String_@preallocSize@::toCharArray(&char feld[])
        {
            var int szm1=feld.sz - 1;
            if(szm1<this.length())
            {
               feld[0]='\\0';
               return;
            }
            var int i=0;
            for(;i<this.length();i++)
            {
               feld[i]=this.getAt(i);
            }
            feld[i]='\\0';
        }

        int String_@preallocSize@::asNumber()
        {
            return this.asNumber(10);
        }

        int String_@preallocSize@::asNumber(int radix)
        {
            var int ret=0;
            var int isNegative=0;
            var int idx=0;
            if(this.getAt(0)== '-')
            {isNegative=1;idx=1;}

            for(;idx<this.length();idx++)
            {
                var char c=this.getAt(idx);
                switch(c)
                {
                    case '0':case '1':case '2':case '3':case '4':
                    case '5':case '6':case '7':case '8':case '9':
                    {
                      ret=ret*radix;
                      ret=ret+cast(int,c)-cast(int,'0');
                    };break;
                    case 'a':case 'b':case 'c':case 'd':case 'e':case 'f':
                    {
                      ret=ret*radix;
                      ret=ret+cast(int,c)-cast(int,'a')+10;
                    };break;
                    case 'A':case 'B':case 'C':case 'D':case 'E':case 'F':
                    {
                      ret=ret*radix;
                      ret=ret+cast(int,c)-cast(int,'A')+10;
                    };break;
                    default:{idx=this.length();};
                }
            }
            if(isNegative == 1)
            {
              ret= -1 * ret;
            }
            return ret;
        }

        void String_@preallocSize@::escape(&String_@preallocSize@ escaped,char escape)
        {
           for(var int i=0;i<this.length();i++)
           {
              var char c=this.getAt(i);
              if(c==escape)
              {
                  escaped.append(escape);
                  escaped.append(escape);
              }
              else
              {
                  escaped.append(c);
              }
           }
        }

        void String_@preallocSize@::deEscape(&String_@preallocSize@ deescaped,char escape)
        {
            for(var int i=0;i<this.length();i++)
            {
               var char c=this.getAt(i);
               if(c==escape)
               {
                  i++;
                  deescaped.append(this.getAt(i));
               }
               else
               {
                   deescaped.append(c);
               }
            }
        }

        int String_@preallocSize@::endsWith(&char end[])
        {
            var int j=0;
            while((end[j] != '\\0') && (j<end.sz) ){j++;}
            if(j<=0)
            {return -1;}
            else{
              j=j - 1;
            }
            for(var int i=this.length() - 1; (i>=0) && (j>=0); i=i - 1,j=j - 1)
            {
                var char c=this.getAt(i);
                if(c != end[j])
                {return 0;}
            }
            return 1;
        }

        int String_@preallocSize@::endsWith(&String_16 str2)
        {
            if(str2.length()>this.length()){return 0;}
            var int p=str2.length() - 1;
            var int p2=this.length() - 1;
            for(var int i=p, var int j=p2;i>0;i=i - 1,j=j - 1)
            {
                if(str2.getAt(i)!= this.getAt(j))
                {return 0;}
            }
            return 1;
        }

        int String_@preallocSize@::startsWith(&char buf[])
        {
           var int l=this.lengthOf(buf);
           var int i=0;
           if(l>this.length()){return 0;}
           while((i<l) && (buf[i] != '\\0'))
           {
              if(this.getAt(i) != buf[i])
              {return 0;}
              i++;
           }
           return 1;
        }


        void String_@preallocSize@::subString(&String_@preallocSize@ oStr,int start, int end)
        {
           for(var int i=start;i<=end;i++)
           {
              oStr.append(this.getAt(i));
           }
        }


        int String_@preallocSize@::isNumberChar(char c)
        {
            switch(c)
            {
               case '0':case '1':case '2':case '3':
               case '4':case '5':case '6':case '7':
               case '8':case '9':{return 1;};
               default:{return 0;};
            }
            return 0;
        }

        int String_@preallocSize@::hashCode()
        {
            var int hc;
            if(_extendedBuf == NULL)
            {
               inline_cpp[[ 
                 hc = suchoi(_preAllocBuf._array,_length);
               \]]
            }
            else
            {
               inline_cpp[[ 
                 hc = suchoi(_extendedBuf._theObject->_array,_length);
               \]]
            }
            return hc;
        }

     
        int String_@preallocSize@::getHashCode()
        {
          return this.hashCode();
        }

        void String_@preallocSize@::unitTest()
        {
            var PrintfClass pfc;
           if(1 == 1)
           {
             var String_@preallocSize@ s1("aa");
             var String_@preallocSize@ s2("aa");
             s1.append(s2);
             if( (s1.length() != 4) || (s1.equals("aaaa") != 1) || (s1.equals("aa") == 1))
             {pfc.fstr("String unittest fail # 1").pr();}
             //pfc.fstr("s1").pr();
             s1.clear();
             s1.append("hurzlipurzligiraffe");
             s1.append(s2);
             if( (s1.length() != 21) || (s1.equals("hurzlipurzligiraffeaa") != 1) || (s1.equals("aa") == 1))
             {pfc.fstr("String unittest fail # 2").pr();}
           }
           if(1 == 1)
           {
             //pfc.fstr("s2").pr();
             var String_@preallocSize@ s1("aa");
             var String_@preallocSize@ s2;
             s2.append("hurzlipurzligiraffe");
             //pfc.fstr("s3").pr();
             s2.append(s1);
             if( (s2.length() != 21) || (s2.equals("hurzlipurzligiraffeaa") != 1) || (s2.equals("aa") == 1))
             {pfc.fstr("String unittest fail # 3").pr();}


           }
           if(1==1)
           {
             var String_@preallocSize@ s1("a");
             var String_@preallocSize@ s2("b");

             for(var int i=0;i<10;i++)
             {
                s1.append(s2);
             }
             if( (s1.length() != 11) || (s1.equals("abbbbbbbbbb") != 1) || (s1.equals("abbbb") == 1))
             {pfc.fstr("String unittest fail # 4").pr();}

           }
           if(1==1)
           {
             var String_@preallocSize@ s1("a");
             var String_@preallocSize@ s2("cc");

             for(var int i=0;i<10;i++)
             {
                s1.append(s2);
             }
             if( (s1.length() != 21) || (s1.equals("acccccccccccccccccccc") != 1) || (s1.equals("abbbb") == 1))
             {pfc.fstr("String unittest fail # 5").pr();}

           }
           if(1==1)
           {
             var String_@preallocSize@ s1("a");
             var String_@preallocSize@ s2("cc");

             for(var int i=0;i<10;i++)
             {
                s1.append(s2);
             }
             if( (s1.length() != 21) || (s1.equals("acccccccccccccccccccc") != 1) || (s1.equals("abbbb") == 1))
             {pfc.fstr("String unittest fail # 5").pr();}

           }
           if(1==1)
           {
             var String_@preallocSize@ s1("acccccccccccccccccccc");
             var String_@preallocSize@ s2("cc");

             for(var int i=0;i<10;i++)
             {
                s1.append(s2);
             }
             if( (s1.length() != 41) || (s1.equals("acccccccccccccccccccccccccccccccccccccccc") != 1) || (s1.equals("abbbb") == 1))
             {pfc.fstr("String unittest fail # 7").pr();}

           }
           if(1==1)
           {
             var String_@preallocSize@ s1("acccccccccccccccccccc");
             var String_@preallocSize@ s2("acccccccccccccccccccc");

             for(var int i=0;i<10;i++)
             {
                s1.append(s2);
             }
             var int expLength=10*21+21;
             if( (s1.length() != expLength) || (s1.equals("abbbb") == 1))
             {pfc.fstr("String unittest fail # 8").pr();}

           }
           if(1==1)
           {
              var String_16 ext;
              var String_16 filename("/home/x.docx");
              filename.rightOf('/',ext);
              pfc.fstr("$").sa(ext).pr();
              filename.rightOf('.',ext);
              pfc.fstr("$").sa(ext).pr();
 
              filename.assign("/tmp/abc.html");
              filename.rightOf('.',ext);
              pfc.fstr("$").sa(ext).pr();
           }
           //pfc.fstr("unittest finished").pr();
 

        }

        int Hash_String_@preallocSize@::hash(&String_@preallocSize@ str)
        {
            return str.getHashCode();
        }

        int Compare_String_@preallocSize@::compare(&String_@preallocSize@ s1,&String_@preallocSize@ s2)
        {
            if(s1.equals(s2) == 1)
            {
              return 1;
            }
            return 0;
        }

        void Assigner_String_@preallocSize@::assign(&String_@preallocSize@ s1,&String_@preallocSize@ s2)
        {
           s1.clear();
           s1.append(s2);
        }
]]


class FGString{
   generate String("16");
   generate String("32");
   generate String("64");
   generate String("128");
   
  String_16 _content;

  methods:
  FGString(&char init[]);

  void append(&char str[]);
  void print();

  int compare(&char str[]);


};


class dllexport_a AlphaEntry{
   char _c;
   int _order;
   methods:
   AlphaEntry();
};


class AlphabeticSorter
{
   AlphaEntry _alphabet[36];
  methods:
   AlphabeticSorter();
   int isBelow(&char a[],&char b[]);
   int isBelow(String_16* a,String_16* b);


   int isBelow(String_16* wordlist[],int index,String_16* pivot);

   int isAbove(String_16* wordlist[],int index,String_16* pivot);

   int ordinal(char c);

   void qsort(String_16* wordlist[],int lower, int upper);

   void qsort(&int liste[],int start,int end);

   int elemAt(&int liste[],int pos);

   int elemAt(String_16* liste[],int pos);

   int isAboveOrEqualPivot (String_16* liste[],int pos,String_16* pivot);

   int isBelowOrEqualPivot (String_16* liste[],int pos,String_16* pivot);

   void test();
};

